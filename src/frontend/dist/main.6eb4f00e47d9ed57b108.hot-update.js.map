{"version":3,"file":"main.6eb4f00e47d9ed57b108.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;;AAEA;AAGA;;AAUA;;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA","sources":["webpack://frontend/./src/demos/legal/demoSteps.ts","webpack://frontend/webpack/runtime/getFullHash"],"sourcesContent":["// src/demos/legal/demoSteps.ts\n\nimport fabricService from '../../services/fabricService';\nimport { Asset, Proposal, Org } from '../../types/types';\nimport { AppDispatch, RootState } from '../../store/store';\nimport {\n  setContextAsset,\n  setContextProposal,\n  addOrg,\n  addAssetToOrg,\n  addProposalToOrg,\n  updateProposalsInOrg,\n  setError,\n} from '../../store/slices/demoSlice';\n\n// Update the DemoStep type to accept dispatch and getState\nexport type DemoStep = (dispatch: AppDispatch, getState: () => RootState) => Promise<void>;\n\nexport const demoSteps: DemoStep[] = [\n\n  // Step 1: Add Organization\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    const org: Org = { MSP: 'Org1MSP', assets: [], proposals: [], history: [] };\n    dispatch(addOrg(org));\n    console.log('Organization Org1MSP added.');\n  },\n\n  // Step 2: Add Asset\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      const assetData = { name: 'Asset1', size: '400' };\n      const asset: Asset = await fabricService.addNewAsset('Org1MSP', assetData);\n      console.log('Asset added successfully.', asset);\n\n      // Update context and org with the new asset\n      dispatch(setContextAsset(asset));\n      dispatch(addAssetToOrg({ orgMSP: 'Org1MSP', asset: asset }));\n    } catch (error: any) {\n      console.error('Error adding asset:', error);\n      dispatch(setError(error.message || 'Failed to add asset'));\n      throw error; // Re-throw to halt execution\n    }\n  },\n\n  // Step 3: Init Transfer Asset\n  async (dispatch: AppDispatch, getState: () => RootState) => {  \n    try {\n      const { demo: { context } } = getState();\n      if (!context.asset) {\n        throw new Error('Asset data is missing. Cannot transfer.');\n      }\n\n      const buyerMSP = 'Org2MSP';\n      const sellerMSP = 'Org1MSP';\n\n      const proposal: Proposal = await fabricService.transferInit(context.asset, buyerMSP, sellerMSP);\n      console.log('Proposal sent successfully.', proposal);\n\n      // Update context and org with the new proposal\n      dispatch(setContextProposal(proposal));\n      dispatch(addProposalToOrg({ orgMSP: sellerMSP, proposal }));\n    } catch (error: any) {\n      console.error('Error initializing transfer:', error);\n      dispatch(setError(error.message || 'Failed to initialize transfer'));\n      throw error; // Re-throw to halt execution\n    }\n  },\n\n  // Step 4: Add Org2 and updateProposalsInOrg\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      const org: Org = { MSP: 'Org2MSP', assets: [], proposals: [], history: [] };\n      dispatch(addOrg(org));\n      console.log('Organization Org2MSP added.');\n\n      const proposals: Proposal[] = await fabricService.getProposals('Org2MSP');\n      console.log('Proposals received successfully.', proposals);\n      console.log('Proposal assetId', proposals[0].assetId);\n\n      dispatch(updateProposalsInOrg({ orgMSP: 'Org2MSP', proposals }));\n      dispatch(setContextProposal(proposals[0]));\n    } catch (error: any) {\n      console.error('Error updating proposals:', error);\n      dispatch(setError(error.message || 'Failed to update proposals'));\n      throw error;\n    }\n  },\n\n  // Step 5: Accept Proposal\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      const { demo: { context } } = getState();\n      if (!context.proposal) {\n        throw new Error('Proposal data is missing. Cannot accept.');\n      }\n      console.log('Proposal Being Sent:', context.proposal);\n      console.log('Proposal ID Being Sent:', context.proposal.id);\n      await fabricService.acceptProposal('Org2MSP', context.proposal.id);\n      console.log('Proposal accepted successfully.');\n    } catch (error: any) {\n      console.error('Error accepting proposal:', error); \n      dispatch(setError(error.message || 'Failed to accept proposal'));\n      throw error;\n    }\n  },\n\n  //Step 6: Update Proposal Again\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      const proposals: Proposal[] = await fabricService.getProposals('Org2MSP');\n      console.log('Proposals received successfully.', proposals);\n      console.log('Proposal assetId', proposals[0].assetId);\n\n      dispatch(updateProposalsInOrg({ orgMSP: 'Org2MSP', proposals }));\n      dispatch(setContextProposal(proposals[0]));\n      console.log(proposals[0]);\n    } catch (error: any) {\n      console.error('Error updating proposals:', error);\n      dispatch(setError(error.message || 'Failed to update proposals'));\n      throw error;\n    }\n  },\n\n  // Step 7: Transfer Asset\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      const { demo: { context } } = getState();\n      if (!context.asset || !context.proposal) {\n        throw new Error('Asset or Proposal data is missing. Cannot transfer.');\n      }\n\n      const transferredAsset: Asset = await fabricService.transferAsset('Org1MSP', context.asset, context.proposal);\n      console.log('Asset transferred successfully.', transferredAsset);\n\n      // Update context and org with the transferred asset\n      dispatch(setContextAsset(transferredAsset));\n      dispatch(addAssetToOrg({ orgMSP: 'Org2MSP', asset: transferredAsset }));\n    } catch (error: any) {\n      console.error('Error transferring asset:', error);\n      dispatch(setError(error.message || 'Failed to transfer asset'));\n      throw error; // Re-throw to halt execution\n    }\n  }\n];\n","__webpack_require__.h = () => (\"3fa7ff8735673db0b786\")"],"names":[],"sourceRoot":""}