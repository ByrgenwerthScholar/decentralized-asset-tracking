{"version":3,"file":"main.46b99876058587fb1ef4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAXA;AAAA;AAAA;AAaA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AARA;AAAA;AAAA;AAUA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AARA;AAAA;AAAA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA","sources":["webpack://frontend/./src/services/fabricService.ts","webpack://frontend/webpack/runtime/getFullHash"],"sourcesContent":["// src/services/fabricService.ts\nimport axios from 'axios';\nimport { Asset, Proposal } from '../types/types';\n\n// Function to create an Axios instance with dynamic org\nconst createApiClient = (org: string) => {\n  return axios.create({\n    baseURL: `http://localhost:3000`, // Ensure this matches your Express server port\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    // If you need to include 'org' in headers or params, adjust accordingly\n    // headers: { 'X-Org': org },\n    // params: { org },\n  });\n};\n\n// Define all service functions\nconst addNewAsset = async (\n  org: string,\n  assetData: { name: string; size: string }\n) => {\n  try {\n    const apiClient = createApiClient(org);\n    const response = await apiClient.post(`/${org}/addnew`, assetData); // Replace with your actual endpoint\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error.response?.data?.message || 'Failed to add asset');\n  }\n};\n\nconst transferInit = async (\n  asset: Asset, \n  buyer: string,\n  org: string\n) => {\n  try {\n    const apiClient = createApiClient(org);\n    const response = await apiClient.post(`/${org}/transferinit`, {asset: asset, msp: buyer}); // Replace with your actual endpoint\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error.response?.data?.message || 'Failed to transfer asset');\n  }\n};\n\nconst acceptProposal = async (org: string, proposalId: string) => {\n  try {\n    const apiClient = createApiClient(org);\n    const response = await apiClient.post(`/${org}/acceptproposal`, proposalId); // Replace with your actual endpoint\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error.response?.data?.message || 'Failed to accept proposal');\n  }\n};\n\nconst transferAsset = async (\n  org: string, \n  asset: Asset,\n  proposal: Proposal\n  ) => {\n  try {\n    const apiClient = createApiClient(org);\n    const response = await apiClient.post(`/${org}/transfer`, {asset: asset, proposal: proposal}); // Replace with your actual endpoint\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error.response?.data?.message || 'Failed to transfer asset');\n  }\n};\n\nconst getProposals = async (org: string) => {\n  try {\n    const apiClient = createApiClient(org);\n    const response = await apiClient.get(`/${org}/getallproposals`); \n    return response.data;\n  } catch (error: any) {\n    throw new Error(error.response?.data?.message || 'Failed to fetch proposals');\n  }\n}\n\n// Bundle all functions into a fabricService object\nconst fabricService = {\n  addNewAsset,\n  transferInit,\n  acceptProposal,\n  transferAsset,\n  getProposals,\n};\n\n// Export the fabricService object as the default export\nexport default fabricService;\n","__webpack_require__.h = () => (\"4794bedac2fea1a9cc3e\")"],"names":[],"sourceRoot":""}