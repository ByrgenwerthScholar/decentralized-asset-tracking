{"version":3,"file":"main.e30fae08937da31c76f7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;AAWA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA","sources":["webpack://frontend/./src/demos/legal/demoSteps.ts","webpack://frontend/webpack/runtime/getFullHash"],"sourcesContent":["import fabricService from '../../services/fabricService';\nimport { Asset, Proposal, Org } from '../../types/types';\nimport { DemoContext } from '../../store/slices/demoSlice';\nimport { AppDispatch, RootState } from '../../store/store';\nimport {\n  setContextAsset,\n  setContextProposal,\n  addOrg,\n  addAssetToOrg,\n  addProposalToOrg,\n  updateProposalsInOrg,\n  setError, // Ensure setError is imported\n} from '../../store/slices/demoSlice';\n\nexport type DemoStep = (dispatch: AppDispatch, getState: () => RootState) => Promise<void>;\n\nexport const demoSteps: DemoStep[] = [\n\n  async (dispatch: AppDispatch, ) => {\n    // Step 1: Add Organization\n    const org: Org = { MSP: 'Org1MSP', assets: [], proposals: [], history: [] };\n    dispatch(addOrg(org));\n  },\n\n  async (context: DemoContext, dispatch: AppDispatch) => {\n    // Step 2: Add Asset\n    try {\n      const assetData = { name: 'Asset1', size: '400' };\n      const asset: Asset = await fabricService.addNewAsset('Org1MSP', assetData);\n      console.log('Asset added successfully.', asset);\n      dispatch(setContextAsset(asset));\n      dispatch(addAssetToOrg({ orgMSP: 'Org1MSP', asset }));\n    } catch (error: any) {\n      console.error('Error adding asset:', error);\n      dispatch(setError(error.message || 'Failed to add asset'));\n    }\n  },\n\n  async (context: DemoContext, dispatch: AppDispatch) => {  \n    // Step 3: Init Transfer Asset \n    try {\n      if (!context.asset) {\n        throw new Error('Asset data is missing. Cannot transfer.');\n      }\n\n      const buyerMSP = 'Org2MSP';\n      const sellerMSP = 'Org1MSP';\n\n      const proposal: Proposal = await fabricService.transferInit(context.asset, buyerMSP, sellerMSP);\n      dispatch(setContextProposal(proposal));\n      dispatch(addProposalToOrg({ orgMSP: sellerMSP, proposal }));\n      console.log('Proposal sent successfully.');\n    } catch (error: any) {\n      console.error('Error initializing transfer:', error);\n      dispatch(setError(error.message || 'Failed to initialize transfer'));\n    }\n  },\n\n  async (context: DemoContext, dispatch: AppDispatch) => {\n    // Step 4: Add Org2 and updateProposalsInOrg\n    try {\n      const org: Org = { MSP: 'Org2MSP', assets: [], proposals: [], history: [] };\n      dispatch(addOrg(org));\n\n      const proposals: Proposal[] = await fabricService.getProposals('Org2MSP');\n      console.log('Proposals received successfully.', proposals);\n      dispatch(updateProposalsInOrg({ orgMSP: 'Org2MSP', proposals }));\n    } catch (error: any) {\n      console.error('Error updating proposals:', error);\n      dispatch(setError(error.message || 'Failed to update proposals'));\n      throw new Error(error);\n    }\n  },\n\n  async (context: DemoContext, dispatch: AppDispatch) => {\n    // Step 5: Accept Proposal\n    try {\n      if (!context.proposal) {\n        throw new Error('Proposal data is missing. Cannot accept.');\n      }\n      await fabricService.acceptProposal('Org2MSP', context.proposal.id);\n      console.log('Proposal accepted successfully.');\n    } catch (error: any) {\n      console.error('Error accepting proposal:', error); \n      dispatch(setError(error.message || 'Failed to accept proposal'));\n      throw new Error(error);\n    }\n  },\n\n  async (context: DemoContext, dispatch: AppDispatch) => {\n    // Step 6: Transfer Asset\n    try {\n      if (!context.asset || !context.proposal) {\n        throw new Error('Asset or Proposal data is missing. Cannot transfer.');\n      }\n\n      const transferredAsset: Asset = await fabricService.transferAsset('Org2MSP', context.asset, context.proposal);\n      console.log('Asset transferred successfully.', transferredAsset);\n      context.asset = transferredAsset;\n\n      dispatch(setContextAsset(transferredAsset));\n      dispatch(addAssetToOrg({ orgMSP: 'Org2MSP', asset: transferredAsset }));\n    } catch (error: any) {\n      console.error('Error transferring asset:', error);\n      dispatch(setError(error.message || 'Failed to transfer asset'));\n      throw new Error(error);\n    }\n  }\n];\n","__webpack_require__.h = () => (\"56f3f9af55da79f020ae\")"],"names":[],"sourceRoot":""}