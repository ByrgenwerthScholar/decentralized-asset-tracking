{"version":3,"file":"main.a06b2846c16712405bc3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AADA;;AAEA;AACA;AAEA;AACA;AAMA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AAAA;AAAA;AAmDA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AA7HA;AAEA;AAAA;AA6HA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7IA","sources":["webpack://frontend/./src/pages/DemoPage/MainContent/DemoManager.tsx","webpack://frontend/webpack/runtime/getFullHash"],"sourcesContent":["// src/components/DemoManager.tsx\n\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, AppDispatch } from '../../../store/store';\nimport { demoSteps, DemoStep } from '../../../demos/legal/demoSteps';\nimport {\n  setCurrentStep,\n  demoError,\n  setSuccess,\n  stopDemo,\n} from '../../../store/slices/demoSlice';\nimport { Box, CircularProgress, Typography } from '@mui/material';\n\nconst DemoManager: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const { status, currentStep, context, error, success } = useSelector((state: RootState) => state.demo);\n  const isMounted = useRef(true);\n  const latestStatus = useRef(status);\n\n  // Update the latestStatus ref whenever status changes\n  useEffect(() => {\n    latestStatus.current = status;\n    console.log(`Status updated to: ${status}`);\n  }, [status]);\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const executeDemo = async () => {\n      console.log(`Starting demo execution from step index: ${currentStep}`);\n\n      let stepIndex = currentStep;\n\n      while (stepIndex < demoSteps.length && latestStatus.current === 'running') {\n        console.log(`Executing Step ${stepIndex + 1}: ${stepDetails[stepIndex].label}`);\n\n        // Update the current step in Redux\n        dispatch(setCurrentStep(stepIndex));\n\n        try {\n          // Execute the current step\n          await demoSteps[stepIndex](context, dispatch);\n          console.log(`Step ${stepIndex + 1} completed successfully.`);\n\n          // Set success message\n          dispatch(setSuccess(`Step ${stepIndex + 1} completed successfully.`));\n        } catch (error: any) {\n          // Set error message and halt the demo\n          console.error(`Error in Step ${stepIndex + 1}:`, error);\n          dispatch(demoError(`Step ${stepIndex + 1} failed: ${error.message}`));\n          // Update latestStatus.current immediately\n          latestStatus.current = 'stopped';\n          break;\n        }\n\n        // Increment the step index\n        stepIndex += 1;\n\n        // Check if the demo has been paused or stopped\n        if (latestStatus.current !== 'running') {\n          console.log(`Demo has been ${latestStatus.current}. Halting further execution.`);\n          break;\n        }\n      }\n\n      // Update the Redux store with the new step index\n      if (stepIndex !== currentStep) {\n        dispatch(setCurrentStep(stepIndex));\n      }\n\n      // If all steps completed successfully\n      if (isMounted.current && stepIndex >= demoSteps.length) {\n        console.log('Demo completed successfully.');\n        dispatch(setSuccess('Demo completed successfully.'));\n        dispatch(stopDemo());\n        latestStatus.current = 'stopped';\n      }\n    };\n\n    if (status === 'running') {\n      executeDemo();\n    }\n\n  }, [status]); \n\n  // Define step details for display\n  const stepDetails = [\n    { label: 'Add New Org', description: 'Adding the manufacturing Org.' },\n    { label: 'Add New Asset', description: 'Adding a new asset to the blockchain.' },\n    { label: 'Init Transfer Asset', description: 'Initiating transfer of the asset to another organization.' },\n    { label: 'Updating Org 2', description: 'Adding a new org to the blockchain and getting all proposals.' },\n    { label: 'Accept Proposal', description: 'Accepting the transfer proposal.' },\n    { label: 'Final Transfer', description: 'Completing the transfer of the asset to the buyer.' },\n  ];\n\n  return (\n    <Box sx={{ p: 2 }}>\n      {status === 'running' && (\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <CircularProgress size={24} />\n          <Typography variant=\"body1\" sx={{ ml: 2 }}>\n            Demo is running...\n          </Typography>\n        </Box>\n      )}\n      {(status === 'paused' || status === 'stopped') && (\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          Demo is {status === 'paused' ? 'paused' : 'stopped'}.\n        </Typography>\n      )}\n      {status === 'idle' && (\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          Demo is idle. Click \"Start Demo\" to begin.\n        </Typography>\n      )}\n      {status !== 'idle' && currentStep < stepDetails.length && (\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"h6\">Current Step: {currentStep}</Typography>\n          <Typography variant=\"subtitle1\">{stepDetails[currentStep].label}</Typography>\n          <Typography variant=\"body2\">{stepDetails[currentStep].description}</Typography>\n        </Box>\n      )}\n      {error && (\n        <Typography variant=\"body2\" color=\"error\" sx={{ mt: 2 }}>\n          {error}\n        </Typography>\n      )}\n      {success && (\n        <Typography variant=\"body2\" color=\"success.main\" sx={{ mt: 2 }}>\n          {success}\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default DemoManager;\n","__webpack_require__.h = () => (\"cb87239b2060d7f1a6a2\")"],"names":[],"sourceRoot":""}