// package chaincode

// import (
//     "encoding/hex"
//     "fmt"

//     "github.com/alinush/go-mcl"
//     "github.com/hyperledger/fabric-chaincode-go/shim"
//     pb "github.com/hyperledger/fabric-protos-go/peer"
// )

// func init() {
//     // Initialize the cryptographic system with the BN254 curve
//     mcl.InitFromString("BN254")
//     fmt.Println("Crypto system initialized.")
// }

// // Init is called during chaincode instantiation to initialize any data
// func (c *CryptoChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
//     return shim.Success([]byte("Initialized Successfully!"))
// }

// // Invoke routes to the appropriate function based on the function name
// func (c *CryptoChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
//     function, args := stub.GetFunctionAndParameters()
//     fmt.Print("Invoke function: %s with args: %v\n", function, args)

//     switch function {
//     case "createNewAccumulator":
//         g1Hex, err := c.CreateNewAccumulator(stub)
//         if err != nil {
//             return shim.Error(err.Error())
//         }
//         return shim.Success([]byte(g1Hex))

//     case "addToAccumulator":
//         if len(args) < 2 {
//             return shim.Error("addToAccumulator expects two arguments: accumulatorHex and data")
//         }

//         accumulatorHex := args[0]
//         data := args[1]
//         updatedAccumulatorHex, err := c.AddToAccumulator(stub, accumulatorHex, data)
//         if err != nil {
//             return shim.Error(err.Error())
//         }
//         return shim.Success([]byte(updatedAccumulatorHex))

//     default:
//         return shim.Error(fmt.Sprintf("No function named %s in this chaincode.", function))
//     }
// }

// // CreateNewAccumulator initializes a new accumulator and stores g2 in the ledger
// func (c *CryptoChaincode) CreateNewAccumulator(stub shim.ChaincodeStubInterface) (string, error) {
//     var g1 mcl.G1
//     var g2 mcl.G2
//     g1.Clear()
//     g2.Clear()

//     g1Hex := serializeAccumulatorG1(&g1)
//     g2Hex := serializeAccumulatorG2(&g2)

//     // Store g2Hex in the ledger under key 'g2'
//     err := stub.PutState("g2", []byte(g2Hex))
//     if err != nil {
//         return "", fmt.Errorf("error storing g2 accumulator in cryptoChaincode: %v", err)
//     }
//     fmt.Println("Successfully created new accumulator...")
//     return g1Hex, nil
// }

// // AddToAccumulator adds data to the accumulator and returns the updated accumulator
// func (c *CryptoChaincode) AddToAccumulator(stub shim.ChaincodeStubInterface, accumulatorHex string, data string) (string, error) {
//     fmt.Println("Adding to accumulator... accumulatorHex:", accumulatorHex, " data:", data)

//     newEntry := hashAndMapToG1(data)
//     accumulator, err := deserializeAccumulatorG1(accumulatorHex)
//     if err != nil {
//         return "", fmt.Errorf("failed to deserialize accumulator: %v", err)
//     }

//     var newAccumulator mcl.G1
//     mcl.G1Add(&newAccumulator, accumulator, newEntry)

//     newAccumulatorHex := serializeAccumulatorG1(&newAccumulator)
//     return newAccumulatorHex, nil
// }

// // serializeAccumulatorG1 serializes a G1 accumulator to a hex string
// func serializeAccumulatorG1(accumulator *mcl.G1) string {
//     bytes := accumulator.Serialize()
//     return hex.EncodeToString(bytes)
// }

// // serializeAccumulatorG2 serializes a G2 accumulator to a hex string
// func serializeAccumulatorG2(accumulator *mcl.G2) string {
//     bytes := accumulator.Serialize()
//     return hex.EncodeToString(bytes)
// }

// // deserializeAccumulatorG1 deserializes a hex string into a G1 accumulator
// func deserializeAccumulatorG1(serializedData string) (*mcl.G1, error) {
//     bytes, err := hex.DecodeString(serializedData)
//     if err != nil {
//         return nil, err
//     }
//     var accumulator mcl.G1
//     if err := accumulator.Deserialize(bytes); err != nil {
//         return nil, err
//     }
//     return &accumulator, nil
// }

// // hashAndMapToG1 hashes data into a G1 element
// func hashAndMapToG1(data string) *mcl.G1 {
//     var point mcl.G1
//     point.HashAndMapTo([]byte(data))
//     return &point
// }

// // main starts up the chaincode in the container during instantiate
// func main() {
//     err := shim.Start(new(CryptoChaincode))
//     if err != nil {
//         fmt.Printf("Error starting CryptoChaincode: %s", err)
//     }
// }
